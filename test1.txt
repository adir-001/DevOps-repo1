let
 


/*EndDate = Date.AddYears(Date.EndOfYear(DateTime.Date(DateTime.LocalNow())),1),*/
 EndDate = Date.AddYears(Date.EndOfYear(DateTime.Date(DateTime.LocalNow())),3),
 StartDate=#date(2007, 01,01 ),
 DayCount = Duration.Days(Duration.From(EndDate - StartDate))+1,
 Culture ="en-US",

 Source = List.Dates(StartDate,DayCount,#duration(1,0,0,0)),
 TableFromList = Table.FromList(Source, Splitter.SplitByNothing()),    
 ChangedType = Table.TransformColumnTypes(TableFromList,{{"Column1", type date}}),
 RenamedColumns = Table.RenameColumns(ChangedType,{{"Column1", "Date"}}),
 InsertYear = Table.AddColumn(RenamedColumns, "Year", each Date.Year([Date]), type number),

 InsertQuarter = Table.AddColumn( InsertYear ,"QuarterNumOfYear", each Date.QuarterOfYear([Date]), type number),
 InsertQuarterName = Table.AddColumn(InsertQuarter , "QuarterName" , each "Q-" & Number.ToText([QuarterNumOfYear])),
 InsertHalfOfYearNum = Table.AddColumn(InsertQuarterName , "HalfOfYearNum", each  Number.RoundDown(([QuarterNumOfYear]+1)/2), type number),
 InsertHalfOfYearName = Table.AddColumn(InsertHalfOfYearNum ,"HalfOfYearName",each "H-" & Number.ToText([HalfOfYearNum])),
 InsertHalfOfCalendarYear = Table.AddColumn(InsertHalfOfYearName ,"HalfOfCalendarYear", each  "H" & Number.ToText([HalfOfYearNum]) & " " & Number.ToText([Year])),
 InsertHalfOfCalendarYearSum = Table.AddColumn( InsertHalfOfCalendarYear ,"HalfOfCalendarYearSum",each [Year]*10 +[HalfOfYearNum], type number),
 InsertMonth = Table.AddColumn(InsertHalfOfCalendarYearSum , "MonthNumberOfYear", each Date.Month([Date]), type number),
 InsertDay = Table.AddColumn(InsertMonth, "DayOfMonth", each Date.Day([Date]), type number),
 InsertDayInt = Table.AddColumn(InsertDay, "DateInt", each [Year] * 10000 + [MonthNumberOfYear] * 100 + [DayOfMonth], type number),
 InsertMonthName = Table.AddColumn(InsertDayInt, "MonthName", each Date.ToText([Date], "MMMM", Culture), type text),
 InsertCalendarMonth = Table.AddColumn(InsertMonthName, "MonthInCalendarName", each (try(Text.Range([MonthName],0,3)) otherwise [MonthName]) & " " & Number.ToText([Year])),
    InsertCalendarQtr = Table.AddColumn(InsertCalendarMonth, "QuarterInCalendar", each "Q" & Number.ToText([QuarterNumOfYear]) & " " & Number.ToText([Year])),
 InsertDayWeek = Table.AddColumn(InsertCalendarQtr, "DayOFWeekNum", each 1+Date.DayOfWeek([Date]), type number),
 InsertDayName = Table.AddColumn(InsertDayWeek, "DayOfWeekName", each Text.Trim(Text.Replace(Date.ToText([Date], "dddd", Culture),"יום","")," "), type text),
 InsertWeekEnding = Table.AddColumn(InsertDayName, "WeekEnding", each Date.EndOfWeek([Date]), type date),
 InsertYearMonthSum = Table.AddColumn(InsertWeekEnding,"YearMonthSum", each [Year]*100 +[MonthNumberOfYear], type number),
 InsertYearQuarterSum = Table.AddColumn(InsertYearMonthSum ,"YearQuarterSum", each [Year]*10 +[QuarterNumOfYear], type number),
 

 InsertDaySelection = 
 if Culture="he-IL" 
 then 
 (Table.AddColumn(InsertYearQuarterSum , "Show Dates", each (if Date.IsInCurrentDay(Date.AddDays([Date],1)) then "אתמול" else (if  Date.IsInCurrentDay([Date]) then "היום" else "שאר התאריכים"))))
 else 
 (Table.AddColumn(InsertYearQuarterSum , "Show Dates", each (if Date.IsInCurrentDay(Date.AddDays([Date],1)) then "Yesterday" else (if  Date.IsInCurrentDay([Date]) then "Today" else "Other"))))
 ,

 

 InsertMonthSelection = 
 if Culture="he-IL" 
 then 
 (Table.AddColumn(InsertDaySelection , "Show Months", each (if Date.IsInPreviousMonth([Date]) then "חודש שעבר" else (if  Date.IsInCurrentMonth([Date]) then "החודש" else (if  Date.IsInNextMonth([Date]) then "חודש הבא" else "שאר התאריכים")))))
 else
 (Table.AddColumn(InsertDaySelection , "Show Months", each (if Date.IsInPreviousMonth([Date]) then "Last Month" else (if  Date.IsInCurrentMonth([Date]) then "This Month" else (if  Date.IsInNextMonth([Date]) then "Next Month" else "Other")))))
 ,

 InsertDaysInMonth =Table.AddColumn(InsertMonthSelection ,"DaysInMonth" , each Date.DaysInMonth([Date]) ,type number),
 InsertWeekInYear =  Table.AddColumn(InsertDaysInMonth, "WeekInYear", each [Year]*100+Date.WeekOfYear([Date])),
    #"Changed Type3" = Table.TransformColumnTypes(InsertWeekInYear,{{"WeekInYear", Int64.Type}}),
 InsertYearMonthNumber = Table.AddColumn(#"Changed Type3", "YearMonthNumber",each ([Year]-Date.Year(StartDate))*12+[MonthNumberOfYear], type number),
    ShowYear=Table.AddColumn(InsertYearMonthNumber, "Show Year", each if Date.IsInCurrentYear([Date]) then "שנה נוכחית"  else if Date.IsInPreviousYear([Date]) then "שנה קודמת" else "אחר", type text),
 
 ShowLast7Days = Table.AddColumn( ShowYear, "Show Last 7 Days", each (Duration.Days(Duration.From(DateTime.Date(DateTime.LocalNow()) - [Date]))) <=7 and (Duration.Days(Duration.From(DateTime.Date(DateTime.LocalNow()) - [Date]))) >=0 , type logical),
 ShowLast30Days = Table.AddColumn( ShowLast7Days, "Show Last 30 Days", each (Duration.Days(Duration.From(DateTime.Date(DateTime.LocalNow()) - [Date]))) <=30 and (Duration.Days(Duration.From(DateTime.Date(DateTime.LocalNow()) - [Date]))) >=0 , type logical),
    
 ShowLast_12_Months = Table.AddColumn(ShowLast30Days , "Show Last 12 Months", each [Date]>=Date.AddMonths(Date.StartOfMonth(DateTime.Date(DateTime.LocalNow())),-11),type logical),
 ShowLast_6_Months = Table.AddColumn(ShowLast_12_Months, "Show Last 6 Months", each [Date]>=Date.AddMonths(Date.StartOfMonth(DateTime.Date(DateTime.LocalNow())),-5),type logical),
 ShowLast_3_Months = Table.AddColumn(ShowLast_6_Months, "Show Last 3 Months", each [Date]>=Date.AddMonths(Date.StartOfMonth(DateTime.Date(DateTime.LocalNow())),-2),type logical),
 
 LastRefreshTime = Table.AddColumn(ShowLast_3_Months, "Refresh Time", each Time.From(DateTime.LocalNow())),
 LastRefreshDate = Table.AddColumn(LastRefreshTime ,"Refresh Date", each  DateTime.Date(DateTime.LocalNow()),type date),
 #"LastRefreshDate&Time" = Table.AddColumn(LastRefreshDate, "Refresh Date&Time", each DateTime.LocalNow()+#duration(0,3,0,0)),
   #"Flag_W/S" = Table.AddColumn(#"LastRefreshDate&Time", "Flag_W/S", each // Define functions to calculate the start and end of summer time
let
    StartOfSummer = (Year as number) =>
        let
            LastSundayOfMarch = Date.AddDays(Date.EndOfMonth(#date(Year, 3, 1)), -Date.DayOfWeek(Date.EndOfMonth(#date(Year, 3, 1)), Day.Sunday)),
            FridayBeforeLastSunday = Date.AddDays(LastSundayOfMarch, -2),
            StartDateTime = DateTime.From(FridayBeforeLastSunday) + #duration(0, 2, 0, 0) // Adds 2 hours
        in
            StartDateTime,

    EndOfSummer = (Year as number) =>
        let
            LastSundayOfOctober = Date.AddDays(Date.EndOfMonth(#date(Year, 10, 1)), -Date.DayOfWeek(Date.EndOfMonth(#date(Year, 10, 1)), Day.Sunday)),
            EndDateTime = DateTime.From(LastSundayOfOctober) + #duration(0, 2, 0, 0) // Adds 2 hours
        in
            EndDateTime,

// Add Custom Column to determine if date falls in summer or winter
    Season = if DateTime.From([Date]) >= StartOfSummer(Date.Year([Date])) and DateTime.From([Date]) < EndOfSummer(Date.Year([Date]))
             then "Summer" 
             else "Winter"
in
    Season),
    #"Refresh&Date&TimeNew" = Table.AddColumn(#"Flag_W/S", "Refresh&Date&Time", each if [#"Flag_W/S"] = "Winter" then 
    [#"Refresh Date&Time"] + #duration(0, -1, 0, 0) 
else 
    [#"Refresh Date&Time"]),
 FisrtDayOfMonth = Table.AddColumn( #"Refresh&Date&TimeNew" ,"FirstDayOfMonth", each Date.StartOfMonth([Date])  ,type date),



    #"Add Working Day" = Table.AddColumn(FisrtDayOfMonth, "Is Working Day", each if [DayOFWeekNum] = 6 or [DayOFWeekNum] = 7
then
0
else
1,type number),
 #"Added IsHistory" = Table.AddColumn(#"Add Working Day", "IsHistory", each if [Date] > DateTime.Date(DateTime.LocalNow()) then 0 else 1 , Int64.Type),
    #"Added Day History category" = Table.AddColumn( #"Added IsHistory", "Is History previous years", each if
Date.Month([Date])*100+Date.Day([Date]) >= 
Date.Month(EndDate)*100 +
Date.Day(EndDate)
then
 0 else 1 ,  Int64.Type),
    UntilThisMonth = Table.AddColumn( #"Added Day History category", "UntilThisMonth", each if [Date]<Date.StartOfMonth(EndDate) then 1 else 0, Int64.Type),
    UntilNextMonth = Table.AddColumn(UntilThisMonth, "UntilNextMonth", each if [Date]>Date.EndOfMonth(EndDate) then 0 else 1,  Int64.Type),
    #"Days For Purchasing Forecast" = Table.AddColumn(UntilNextMonth, "Days For Purchasing Forecast", each if [Date] >= #date(2019,1,1)
then
[Date] - #date(2019,1,1)
else null),
    #"Changed Type" = Table.TransformColumnTypes(#"Days For Purchasing Forecast",{{"Year", type text}, {"Is Working Day", Int64.Type}, {"Show Months", type text}, {"Show Dates", type text}, {"QuarterInCalendar", type text}, {"MonthInCalendarName", type text}, {"HalfOfCalendarYear", type text}, {"HalfOfYearName", type text}, {"QuarterName", type text}, {"Refresh Date&Time", type datetime}, {"Days For Purchasing Forecast", Int64.Type}}),
    #"Duplicated Column" = Table.DuplicateColumn(#"Changed Type", "Date", "Date - Copy"),
    #"Changed Type1" = Table.TransformColumnTypes(#"Duplicated Column",{{"Date", type date}}),
    #"Filtered Rows" = Table.SelectRows(#"Changed Type1", each [#"Date - Copy"] > #date(2022, 1, 1)),
    #"Duplicated Column1" = Table.DuplicateColumn(#"Filtered Rows", "WeekInYear", "WeekInYear - Copy"),
    #"Renamed Columns" = Table.RenameColumns(#"Duplicated Column1",{{"WeekInYear - Copy", "WeekInYearNum"}}),
    #"Split Column by Position" = Table.SplitColumn(Table.TransformColumnTypes(#"Renamed Columns", {{"WeekInYear", type text}}, "en-IL"), "WeekInYear", Splitter.SplitTextByRepeatedLengths(4), {"WeekInYear.1", "WeekInYear.2"}),
    #"Changed Type2" = Table.TransformColumnTypes(#"Split Column by Position",{{"WeekInYear.1", Int64.Type}, {"WeekInYear.2", Int64.Type}}),
    #"Merged Columns" = Table.CombineColumns(Table.TransformColumnTypes(#"Changed Type2", {{"WeekInYear.1", type text}, {"WeekInYear.2", type text}}, "en-IL"),{"WeekInYear.1", "WeekInYear.2"},Combiner.CombineTextByDelimiter("-", QuoteStyle.None),"WeekInYear"),
    #"Added Next weeks flag" = Table.AddColumn(#"Merged Columns", "Next weeks flag", each if [Date]<DateTime.Date(DateTime.LocalNow())
then "בפיגור"
else if [WeekInYearNum] =
Date.Year(DateTime.Date(DateTime.LocalNow()))*100+Date.WeekOfYear(DateTime.Date(DateTime.LocalNow()))
then "השבוע"
else if [WeekInYearNum] =
Date.Year(DateTime.Date(DateTime.LocalNow()))*100+Date.WeekOfYear(DateTime.Date(DateTime.LocalNow())) + 1
then "שבוע הבא"
else if [WeekInYearNum] =
Date.Year(DateTime.Date(DateTime.LocalNow()))*100+Date.WeekOfYear(DateTime.Date(DateTime.LocalNow())) + 2
then "בעוד שבועיים"
else "אחר"),
    #"Added Custom" = Table.AddColumn(#"Added Next weeks flag", "Current week", each if (Date.Year(DateTime.LocalNow())*100)+Date.WeekOfYear       (DateTime.LocalNow()) = [WeekInYearNum] 
       then "שבוע נוכחי" 
          else [WeekInYear]),
    #"Added Custom1" = Table.AddColumn(#"Added Custom", "Sort C.week", each if (Date.Year(DateTime.LocalNow())*100)+Date.WeekOfYear       (DateTime.LocalNow()) = [WeekInYearNum]
    then "1" 
     else if  (Date.Year(DateTime.LocalNow())*100)   
              +Date.WeekOfYear(DateTime.LocalNow()) <     
              [WeekInYearNum] then [WeekInYearNum]+100000
              else [WeekInYearNum]-100000),
    #"Removed Columns" = Table.RemoveColumns(#"Added Custom1",{"Refresh Date&Time"})
in
    #"Removed Columns"